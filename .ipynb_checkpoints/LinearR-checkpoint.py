{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "ca9df52e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "ran :  10\n",
      "[[ 28 287]\n",
      " [ 14 147]\n",
      " [  0   7]\n",
      " [ 28 287]\n",
      " [ 14 147]\n",
      " [ 28 287]\n",
      " [ 14 147]\n",
      " [ 42 427]\n",
      " [ 28 287]]\n",
      "p : [8036, 2058, 0, 8036, 2058, 8036, 2058, 17934, 8036, 2058]\n",
      "u : [784, 196, 0, 784, 196, 784, 196, 1764, 784, 196]\n",
      "sum of array xi^2 :  5684\n",
      "sum of array xi*yi :  58310\n",
      "sum of array x : 210 \n",
      "sum of array y : 2170\n",
      "z :  10.0 \n",
      "s :  7.0\n",
      "formula is : \n",
      "\n",
      "y =  10.0 x +  7.0\n"
     ]
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "import random\n",
    "\n",
    "i=0\n",
    "k=[]\n",
    "l=[]\n",
    "\n",
    "ran=int(random.randrange(0,20,1))\n",
    "print('ran : ',ran)\n",
    "while i<ran:\n",
    "    num=random.randrange(0, 50, 14)\n",
    "    k.append(num)\n",
    "    i+=1\n",
    "    #if(np.where(k==num)):\n",
    "     #   pass\n",
    "    #else:\n",
    "     #   k.append(num)\n",
    "    #    i+=1\n",
    "#print(k)\n",
    "\n",
    "x=np.array(k)\n",
    "i=0\n",
    "while i<ran:\n",
    "   #num=random.randrange(0, 100, 3)\n",
    "    num=10*x[i]+7\n",
    "    l.append(num)\n",
    "    i+=1\n",
    "#print(l)\n",
    "y=np.array(l)\n",
    "#print('x : ',x,'\\ny : ',y)\n",
    "\n",
    "data = np.vstack([x, y]).T\n",
    "print (data[:-1])\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "a=np.sum(x)\n",
    "b=np.sum(y)\n",
    "\n",
    "p=[]\n",
    "i=0\n",
    "while i<ran:\n",
    "    p.append(x[i]*y[i])\n",
    "    i+=1\n",
    "print('p :',p)\n",
    "c=np.sum(p)\n",
    "\n",
    "i=0\n",
    "u=[]\n",
    "while i<ran:\n",
    "    u.append(x[i]*x[i])\n",
    "    i+=1\n",
    "print('u :',u)\n",
    "d=np.sum(u)\n",
    "\n",
    "print('sum of array xi^2 : ',d)\n",
    "\n",
    "print('sum of array xi*yi : ',c)\n",
    "\n",
    "print('sum of array x :',a, '\\nsum of array y :',b)\n",
    "\n",
    "m=a\n",
    "n=b\n",
    "v=c\n",
    "r=d\n",
    "\n",
    "z=(m*n-ran*v)/(m*m-ran*r)\n",
    "s=(m*v-n*r)/(m*m-ran*r)\n",
    "\n",
    "print(\"z : \",z,\"\\ns : \",s)\n",
    "print('formula is : \\n')\n",
    "print('y = ',z,'x + ',s)\n",
    "\n",
    "#plt.scatter(x, y)\n",
    "#plt.xlabel(\"Avg Pulse\")\n",
    "#plt.ylabel(\"Avg Life\")\n",
    "#plt.show()\n",
    "\n",
    "\n",
    "\n",
    "\n",
    "plt.xlabel(\"Avg Pulse\")\n",
    "plt.ylabel(\"Avg Life\")\n",
    "plt.scatter(x, y)\n",
    "plt.plot(x, y, marker='o')\n",
    "plt.show()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ee40213a",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
